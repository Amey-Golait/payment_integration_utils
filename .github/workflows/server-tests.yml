name: Server Tests

on:
  workflow_call:
    inputs:
      base_ref:
        type: string

      app_name:
        type: string

  pull_request:
    paths-ignore:
      - "**.css"
      - "**.js"
      - "**.md"
      - "**.html"
      - "**.csv"

  push:
    branches: [develop, "version-15"]
    paths-ignore:
      - "**.css"
      - "**.js"
      - "**.md"
      - "**.html"
      - "**.csv"

env:
  FRAPPE_BRANCH: "version-15"
  ERPNEXT_BRANCH: "version-15"
  APP_NAME: ${{ inputs.app_name || 'payment_integration_utils' }}

# TODO: Update installation process when the app get published and remove SSH configuration
jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        type: [server]

    name: Python Unit Tests

    services:
      mariadb:
        image: mariadb:10.6
        env:
          MARIADB_ROOT_PASSWORD: "password"
        ports:
          - 3306:3306
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true

      - name: Add to Hosts
        run: echo "127.0.0.1 test_site" | sudo tee -a /etc/hosts

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Installing Apps
        run: |
          bash ${GITHUB_WORKSPACE}/.github/helper/install.sh
        env:
          FRAPPE_BRANCH: ${{ env.FRAPPE_BRANCH }}
          ERPNEXT_BRANCH: ${{ env.ERPNEXT_BRANCH }}
          APP_NAME: ${{ env.APP_NAME }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_BRANCH: ${{ github.head_ref }}

      - name: Run Tests
        run: cd ~/frappe-bench/ && bench --site test_site run-parallel-tests --app ${{ env.APP_NAME }} --with-coverage
        env:
          TYPE: server

      - name: Show bench output
        if: ${{ always() }}
        run: cat ~/frappe-bench/bench_start.log || true


  # coverage:
  #   name: Coverage Wrap Up
  #   env:
  #     CODECOV_TOKEN: ${{ secrets.codecov_token || secrets.CODECOV_TOKEN }}
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clone
  #       uses: actions/checkout@v4

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4

  #     - name: Upload coverage data
  #       if: github.event.repository.name == 'india-compliance' || env.CODECOV_TOKEN != ''
  #       uses: codecov/codecov-action@v4
  #       env:
  #         CODECOV_TOKEN: ${{ env.CODECOV_TOKEN }}
  #       with:
  #         name: MariaDB
  #         fail_ci_if_error: true
  #         verbose: true
